---
description: Comprehensive architectural guide for the Automat project including core concepts, directory structure, and development patterns
globs: 
alwaysApply: true
---

# Automat Project Guide

## Project Overview
Automat is a C++/Python hybrid project designed to semi-autonomously play games and provide a general environment for interacting with computers. Currently focused on keyboard macro recording & playback, but has ambitious goals for general computer interaction automation.

## Architecture

### Core Layers
1. **Base Layer**: OS libraries, foreign entities, sophisticated libraries (GStreamer, GEGL, ffmpeg, LLVM, libpython)
2. **Logic Layer**: Objects and scheduler - the beating heart of Automat. Objects can refer to each other using typed connections
3. **UI Layer**: Widgets responsible for graphics, sound, and user input. Heavily relies on Skia
4. **Client Layer**: Platform-specific frontends (Win32, XCB, HTML, macOS)

## Directory Structure

### Key Directories
- `src/` - Main C++ source code
- `run_py/` - Python build system and utilities
- `third_party/` - External dependencies
- `tests/` - Test files
- `assets/` - Resources (textures, fonts, sounds)
- `docs/` - Documentation
- `build/` - Build artifacts
- `.cursor/` - Cursor IDE configuration

### Important Files
- `src/automat.cc` - Main entry point
- `src/base.hh` - Core interfaces and base classes
- `src/object.hh` - Base Object interface
- `src/widget.hh` - Widget system interface
- `src/location.hh` - Object location and management
- `src/library*.hh` - Automat's object implementations
- `run.py` - Main build script entry point
- `ARCHITECTURE.md` - Detailed architecture documentation
- `README.md` - Project overview and setup

## Core Concepts

### Objects
- Base class: `Object` (in `src/object.hh`)
- Must implement `Clone()`, `Name()` methods
- Use reference counting via `Ptr<>` smart pointers
- Can be combined with Widgets for UI representation
- Live in `Location` instances for management
- Support serialization/deserialization

### Widgets
- Base class: `gui::Widget` (in `src/widget.hh`)
- Responsible for drawing, animation, and user interaction
- Use Skia for all graphics operations
- Support hierarchical parent/child relationships
- Have animation system with `Tick()` and `WakeAnimation()`
- Transform system for coordinate conversion

### Locations
- Manage object lifecycle and positioning
- Handle connections between objects
- Provide error reporting and debugging
- Support drag & drop operations

### Machines
- Special objects that can contain other objects
- Act as 2D canvases with object spaghetti connections
- Support front panel organization
- Provide error propagation and diagnostics

## Coding Conventions

### C++ Style
- Based on Google C++ Style Guide
- 100 character line limit
- Pointer alignment to the left (`Type* variable`)
- Use `#pragma once` for header guards

### Copyright
- SPDX license headers required
- SPDX copyright year is the year file was first created

### File Organization
- Headers in `.hh` files
- Implementation in `.cc` files
- Platform-specific code prefixed (e.g., `win32_`, `xcb_`)
- Library objects prefixed with `library_`

### Naming Conventions
- Classes: PascalCase (`Object`, `Widget`, `Machine`)
- Functions/Methods: PascalCase (`Clone()`, `Draw()`, `GetText()`)
- Variables: snake_case (`local_to_parent`, `wake_time`)
- Constants: kPascalCase (`kAnsiKeyStart`)
- Namespaces: lowercase (`automat`, `gui`)

### Memory Management
- Use `Ptr<T>` smart pointers for shared ownership
- Use `WeakPtr<T>` for non-owning references
- Implement `ReferenceCounted` for ref-counted objects
- Use `MakePtr<T>()` to create managed objects

### Error Handling
- Use `Error` objects for error reporting
- Location-based error propagation
- Diagnostic functions for error collection
- Assert for programming errors

## Build System

### Python Build System
- Custom build system in `run_py/`
- Entry point: `run.py` or `run.bat` (Windows)
- Key modules:
  - `run_py/build.py` - Main build logic
  - `run_py/make.py` - Make-like algorithm
  - `run_py/src.py` - Source file scanning
  - `run_py/args.py` - Command line arguments

### Platform Support
- Windows: Uses Win32 APIs, VS compiler
- Linux: Uses XCB, Clang/GCC
- Cross-platform via conditional compilation
- Platform-specific dependency management

### Dependencies
- Skia (graphics)
- Various system libraries
- Third-party libraries managed in `third_party/`
- Auto-installation of missing dependencies

## Development Patterns

### Object Creation
```cpp
// Create from prototype
auto& location = machine.Create<SomeObjectType>();

// Clone existing object
auto new_obj = existing_obj->Clone();
```

### Widget Implementation
```cpp
struct MyWidget : gui::Widget {
  SkPath Shape() const override { /* return shape */ }
  void Draw(SkCanvas& canvas) const override { /* draw implementation */ }
  animation::Phase Tick(time::Timer& timer) override { /* animation */ }
};
```

### Connection System
- Objects can have typed connections via `Argument` class
- Connections support runtime type checking
- Connection callbacks: `ConnectionAdded()`, `ConnectionRemoved()`

### Serialization
```cpp
void SerializeState(Serializer& writer, const char* key) const override;
void DeserializeState(Location& l, Deserializer& d) override;
```

## Testing

### Test Organization
- Tests in `tests/` directory
- Unit tests with `_test.cc` suffix
- Integration tests for complex scenarios
- Platform-specific test considerations

### Test Framework
- Uses Google Test (gtest)
- Test utilities in `run_py/`
- Automated testing via GitHub Actions

## Graphics and UI

### Skia Integration
- All drawing goes through Skia (`SkCanvas`)
- Path-based shapes (`SkPath`)
- Matrix transformations (`SkMatrix`, `SkM44`)
- Surface and drawable management

### Animation System
- Time-based animation with `time::Timer`
- Widget wake/sleep cycle
- Frame-based rendering with caching

### Platform Integration
- Window management abstraction
- Input handling (keyboard, mouse, touch)
- Platform-specific event loops

## Python Integration

### Build Scripts
- All `.py` files are build-related
- Extension system via `hook_*` functions
- Dependency management utilities
- Cross-platform build logic

### Configuration Files
- `pyrightconfig.json` - Python type checking
- `.clang-format` - C++ formatting rules
- `.gitignore` - Version control exclusions

## License and Legal

### Licensing
- MIT License for main code
- Various compatible licenses for dependencies
- SPDX headers required on all source files
- Full license overview in README.md

### Third-Party Dependencies
- Documented license compatibility
- Attribution requirements in README
- Isolated in `third_party/` directory

## Development Workflow

### Third party dependencies
- Dependencies are defined as build system plugins, located in `src/*.py`
- Build system handles dependencies automatically based on `InstallWhenIncluded` regexp

### Debugging
- LSP support for code completion/navigation
- Error reporting through Location system
- Dashboard for build monitoring
- Platform-specific debugging tools

## Future Considerations

### Planned Features
- Safer base language (Rust or C++ successor)
- HTML/JavaScript frontend
- macOS support
- LLVM integration
- Enhanced Python integration

### Architecture Evolution
- API stabilization ongoing
- Constant evolution requires judgment on best practices
- Legacy code mixed with new patterns
- Documentation may lag behind implementation 