---
description: Coding standards, patterns, and best practices for Automat C++/Python development
alwaysApply: true
---

# Automat Coding Rules

## File Headers
All source files must start with SPDX license headers:
```cpp
// SPDX-FileCopyrightText: Copyright 2024 Automat Authors
// SPDX-License-Identifier: MIT
```

## Header Guards
Use `#pragma once` instead of traditional header guards:
```cpp
#pragma once
```

## Code Style

### Formatting
- Line limit: 100 characters (configured in .clang-format)
- Based on Google C++ Style Guide
- Pointer alignment to the left: `Type* variable`
- Use clang-format for automatic formatting

### Naming Conventions
- **Classes/Structs**: PascalCase (`Object`, `Widget`, `Machine`, `LiveObject`)
- **Functions/Methods**: PascalCase (`Clone()`, `Draw()`, `GetText()`, `WakeAnimation()`)
- **Variables/Fields**: snake_case (`local_to_parent`, `wake_time`, `needs_draw`)
- **Constants**: kPascalCase (`kAnsiKeyStart`, `kPointerEnd`)
- **Namespaces**: lowercase (`automat`, `gui`, `animation`)
- **File names**: snake_case (`.hh`, `.cc`, `_test.cc`)

### Platform-Specific Naming
- Windows code: `win32_` prefix (`win32_window.cc`, `win32.hh`)
- Linux X11 code: `xcb_` prefix (`xcb_window.cc`, `xcb.hh`)
- Library objects: `library_` prefix (`library_timer.cc`, `library_hotkey.hh`)

## Object System Patterns

### Object Interface Implementation
All objects must inherit from `Object` and implement required methods:
```cpp
struct MyObject : Object {
  // Required overrides
  Ptr<Object> Clone() const override;
  string_view Name() const override;
  
  // Optional overrides
  void SerializeState(Serializer& writer, const char* key) const override;
  void DeserializeState(Location& l, Deserializer& d) override;
  string GetText() const override;
  void SetText(Location& error_context, string_view text) override;
};
```

### Widget Interface Implementation
Widgets must implement essential drawing methods:
```cpp
struct MyWidget : gui::Widget {
  // Required overrides
  SkPath Shape() const override;
  void Draw(SkCanvas& canvas) const override;
  
  // Common overrides
  animation::Phase Tick(time::Timer& timer) override;
  void WakeAnimation() const override;
  void PointerOver(Pointer&) override;
  void PointerLeave(Pointer&) override;
};
```

### LiveObject Pattern
For objects that need location awareness:
```cpp
struct MyLiveObject : LiveObject {
  // LiveObject provides `here` WeakPtr<Location>
  // Automatically handles Relocate() and ConnectionAdded()
};
```

## Memory Management Rules

### Smart Pointers
- Use `Ptr<T>` for shared ownership (equivalent to shared_ptr)
- Use `WeakPtr<T>` for non-owning references
- Use `MakePtr<T>(args...)` to create managed objects
- Objects must inherit from `ReferenceCounted` to use Ptr<T>

```cpp
// Creating objects
auto obj = MakePtr<MyObject>();

// Storing references
Ptr<MyObject> owned_ref = obj;
WeakPtr<MyObject> weak_ref = obj;

// Converting weak to strong
if (auto strong = weak_ref.lock()) {
  // Use strong pointer
}
```

### Reference Counting Pattern
```cpp
struct MyObject : Object, ReferenceCounted {
  // Object automatically inherits ReferenceCounted virtually
  // No need to explicitly inherit ReferenceCounted again
};
```

## Connection System

### Argument Implementation
```cpp
struct MyArgument : Argument {
  // Implement argument-specific logic
  void ConnectionAdded(Location& here, Connection& connection) override;
  void ConnectionRemoved(Location& here, Connection& connection) override;
};
```

### Live Arguments
For real-time connection updates:
```cpp
struct MyLiveArgument : LiveArgument {
  // Automatically handles connection lifecycle
};
```

## Error Handling

### Error Reporting
```cpp
// Report errors through Location
location.ReportError("Error message");

// Check for errors
if (location.HasError()) {
  // Handle error state
}

// Error propagation in machines
void Errored(Location& here, Location& errored) override {
  // Custom error handling logic
}
```

### Logging
```cpp
#include "log.hh"

// Use logging macros
ERROR << "Error message";
LOG << "Info message";
```

## Graphics and UI Patterns

### Drawing Implementation
```cpp
void Draw(SkCanvas& canvas) const override {
  // Set up paint
  SkPaint paint;
  paint.setColor(SK_ColorBLUE);
  
  // Draw shape
  canvas.drawPath(Shape(), paint);
  
  // Draw children if needed
  DrawChildren(canvas);
}
```

### Shape Definition
```cpp
SkPath Shape() const override {
  SkPath path;
  // Define shape using Skia path operations
  path.addRect(SkRect::MakeWH(width, height));
  return path;
}
```

### Animation Pattern
```cpp
animation::Phase Tick(time::Timer& timer) override {
  // Update animation state
  if (animation_finished) {
    return animation::Finished;
  } else {
    return animation::Continue;
  }
}
```

## Serialization Patterns

### State Serialization
```cpp
void SerializeState(Serializer& writer, const char* key) const override {
  writer.StartObject(key);
  writer.Key("field_name");
  writer.Value(field_value);
  writer.EndObject();
}

void DeserializeState(Location& l, Deserializer& d) override {
  if (d.HasMember("field_name")) {
    field_value = d["field_name"].GetString();
  }
}
```

## Build System Integration

### Python Extensions
For build system extensions, use hook functions:
```python
def hook_recipe(recipe, args):
    # Modify build recipe
    pass

def hook_link(recipe, args):
    # Add linking steps
    pass
```

### Dependency Management
```python
# In *.py files for third-party dependencies
def get_dependencies():
    return ['library_name']

def configure_build(builder):
    # Configure build for this dependency
    pass
```

## Testing Patterns

### Unit Tests
```cpp
// In *_test.cc files
#include <gtest/gtest.h>

TEST(MyObjectTest, BasicFunctionality) {
  auto obj = MakePtr<MyObject>();
  EXPECT_EQ(obj->GetText(), "expected_value");
}
```

### Integration Tests
```cpp
TEST(IntegrationTest, ObjectInteraction) {
  Machine machine;
  auto& location = machine.Create<MyObject>();
  // Test object behavior in context
}
```

## Platform-Specific Code

### Conditional Compilation
```cpp
#ifdef _WIN32
  // Windows-specific code
#elif defined(__linux__)
  // Linux-specific code
#endif
```

### Platform Abstractions
```cpp
// In platform-agnostic headers
struct PlatformWindow {
  virtual void Show() = 0;
  virtual void Hide() = 0;
};

// In platform-specific implementations
struct Win32Window : PlatformWindow {
  void Show() override { /* Win32 implementation */ }
  void Hide() override { /* Win32 implementation */ }
};
```

## Common Antipatterns to Avoid

### Memory Management
- DON'T use raw pointers for ownership
- DON'T manually delete objects managed by Ptr<>
- DON'T store Ptr<> to self (use WeakPtr<> instead)

### Object Lifecycle
- DON'T access objects after they've been relocated
- DON'T assume object lifetime beyond current scope
- DON'T create circular dependencies with Ptr<>

### Widget Hierarchy
- DON'T modify widget hierarchy during drawing
- DON'T call WakeAnimation() excessively
- DON'T forget to implement Shape() method

### Threading
- DON'T access GUI objects from non-main threads
- DON'T perform blocking operations in main thread
- DON'T forget to handle LongRunning cancellation

## Code Review Checklist

### Before Submitting
- [ ] SPDX headers present
- [ ] Code formatted with clang-format
- [ ] No raw pointers for ownership
- [ ] Error handling implemented
- [ ] Tests added for new functionality
- [ ] Documentation updated if needed
- [ ] Platform compatibility considered

### Architecture Compliance
- [ ] Follows layered architecture
- [ ] Objects implement required interface
- [ ] Widgets handle drawing correctly
- [ ] Memory management follows patterns
- [ ] Error propagation implemented 