// kind=shader

uniform shader environment;
uniform float2 environment_size;

uniform float time;
uniform float bubble_radius;

// Note: this isn't really optimized. Especially the noise function could be improved using 3d texture.

// Hash function for pseudo-random number generation
float hash(float n) {
    return fract(sin(n) * 43758.5453);
}

// Divide the input space into 32x32x32 cells and use the cell index as a random number
float noise3d(vec3 p) {

    // Convert the 3D position to a cell index and generate a random value
    vec3 p_cell = floor(p);
    vec3 f = fract(p);

    // Smooth interpolation
    vec3 u = f * f * (3.0 - 2.0 * f);

    // Calculate 8 corners of the cell
    float n000 = hash(p_cell.x + p_cell.y * 157.0 + p_cell.z * 113.0);
    float n001 = hash(p_cell.x + p_cell.y * 157.0 + (p_cell.z + 1.0) * 113.0);
    float n010 = hash(p_cell.x + (p_cell.y + 1.0) * 157.0 + p_cell.z * 113.0);
    float n011 = hash(p_cell.x + (p_cell.y + 1.0) * 157.0 + (p_cell.z + 1.0) * 113.0);
    float n100 = hash((p_cell.x + 1.0) + p_cell.y * 157.0 + p_cell.z * 113.0);
    float n101 = hash((p_cell.x + 1.0) + p_cell.y * 157.0 + (p_cell.z + 1.0) * 113.0);
    float n110 = hash((p_cell.x + 1.0) + (p_cell.y + 1.0) * 157.0 + p_cell.z * 113.0);
    float n111 = hash((p_cell.x + 1.0) + (p_cell.y + 1.0) * 157.0 + (p_cell.z + 1.0) * 113.0);

    // Trilinear interpolation
    float n00 = mix(n000, n001, u.z);
    float n01 = mix(n010, n011, u.z);
    float n10 = mix(n100, n101, u.z);
    float n11 = mix(n110, n111, u.z);

    float n0 = mix(n00, n01, u.y);
    float n1 = mix(n10, n11, u.y);

    return mix(n0, n1, u.x);
}

// Fractal Brownian Motion
float fBm(vec3 p) {
    float v = 0.0;
    float amplitude = 4.0;
    float scale = 6.0;
    const int octaves = 2;
    for (int i = 0;
    i < octaves;
    ++i) {
        v += amplitude * noise3d(scale * p.xyz).r;
        amplitude *= 0.5;
        scale *= 2.0;
    }
    return v;
}

// 1 level of warp noise for micro waves on bubble surface
float warpnoise3(vec3 p) {
    float f = 0.0;
    const float c1 = 0.06;
    const float tc = 0.05;
    vec3 q = vec3(fBm(p + tc * time),
    fBm(p + vec3(5.1, 1.3, 2.2) + tc * time),
    fBm(p + vec3(3.4, 4.8, 5.5) + tc * time));

    return 1.2 * fBm(p + c1 * q);
}

// Returns the normal of the bubble at a given coordinate.
// The ray is always parallel to the screen.
// Bubble is centered at (0, 0).
vec3 BubbleNormal(vec2 ray_pos) {
    float distance = length(ray_pos);
    float xy_length = distance / bubble_radius;

    // Normal length must be 1, so the length of normal.xy can be given by:
    float z = sqrt(1 - xy_length * xy_length);

    return vec3(ray_pos / bubble_radius, z);
}

vec3 Background(vec3 ray) {
    // map the 2D environment to a 3D ray
    vec2 uv = ray.xy / 2 + 0.5;
    uv.y = 1 - uv.y;
    uv *= environment_size;
    return environment.eval(uv).rgb;
}

const float kPi = 3.141592653589793;

// Gradient from 0 to 11
vec3 Gradient(float a) {
    vec3 ret = vec3(1, 1, 1);
    ret = mix(ret, vec3(0.5882352941176471, 0.403921568627451, 0.21176470588235294), smoothstep(0, 1, a));
    ret = mix(ret, vec3(0.34901960784313724, 0.12549019607843137, 0.23137254901960785), smoothstep(1, 2, a));
    ret = mix(ret, vec3(0.2196078431372549, 0.22745098039215686, 0.5450980392156862), smoothstep(2, 3, a));
    ret = mix(ret, vec3(0.16862745098039217, 0.6823529411764706, 0.8745098039215686), smoothstep(3, 4, a));
    ret = mix(ret, vec3(0.9019607843137255, 0.8784313725490196, 0.3843137254901961), smoothstep(4, 5, a));
    ret = mix(ret, vec3(0.7254901960784313, 0.24313725490196078, 0.5333333333333333), smoothstep(5, 6, a));
    ret = mix(ret, vec3(0.12941176470588237, 0.5254901960784314, 0.7254901960784313), smoothstep(6, 7, a));
    ret = mix(ret, vec3(0.10196078431372549, 0.6705882352941176, 0.3686274509803922), smoothstep(7, 8, a));
    ret = mix(ret, vec3(0.7725490196078432, 0.8, 0.47058823529411764), smoothstep(8, 9, a));
    ret = mix(ret, vec3(0.8549019607843137, 0.26666666666666666, 0.5725490196078431), smoothstep(9, 10, a));
    ret = mix(ret, vec3(1, 1, 1), smoothstep(10, 11, a));
    return ret;
}

vec3 BubbleColor(vec3 col, vec3 normal) {
    float t = (1 - normal.z) * 6 + normal.y * 3 + warpnoise3(normal) / 4;
    vec3 bubble_color = Gradient(t);
    vec3 white = vec3(1, 1, 1);
    return mix(bubble_color, white, 0.4) * mix(col, white, 0.5);
}

vec4 main(float2 local_coord) {
    float2 uv = local_coord / bubble_radius / 2 + 0.5;
    float distance = length(local_coord);
    vec3 normal_front = BubbleNormal(local_coord);
    vec3 normal_back = -normal_front;
    vec3 ray = vec3(0, 0, -1);

    float a = distance / bubble_radius;
    a = mix(1, a * a * a * a * a, 0.97);
    // a = 1;

    vec4 ret = vec4(0, 0, 0, 0);
    ret = mix(ret, vec4(BubbleColor(Background(reflect(ray, normal_back)), normal_front), 1), a);
    ret = mix(ret, vec4(BubbleColor(Background(reflect(ray, normal_front)), normal_front), 1), a);

    // 1 mm fade to transparent
    if (bubble_radius - distance < 0.001) {
        ret *= (bubble_radius - distance) / 0.001;
    }

    return ret;
}
