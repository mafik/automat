// kind=shader

const float PI = 3.1415926535897932384626433832795;

uniform shader cable_color;
uniform shader cable_normal;

float3x3 transpose3x3(in float3x3 inMatrix) {
    float3 i0 = inMatrix[0];
    float3 i1 = inMatrix[1];
    float3 i2 = inMatrix[2];

    float3x3 outMatrix = float3x3(
                float3(i0.x, i1.x, i2.x),
                float3(i0.y, i1.y, i2.y),
                float3(i0.z, i1.z, i2.z)
                );

    return outMatrix;
}

float4 main(vec2 uv) {
  vec3 lightDir = normalize(vec3(0, 1, 1)); // normalized vector pointing from current fragment towards the light
  float h = sqrt(1 - uv.x * uv.x );
  float angle = acos(uv.x);

  vec2 uv_x = vec2(dFdy(uv.x), dFdx(uv.x));
  float cable_width = 2 / length(uv_x);

  vec3 T = vec3(normalize(uv_x), 0);
  vec3 N = normalize(vec3(uv.x * T.y, -uv.x * T.x, h));
  vec3 B = cross(T, N);
  float3x3 TBN = float3x3(T, B, N);
  float3x3 TBN_inv = transpose3x3(TBN);

  vec2 texCoord = vec2(-angle / PI, uv.y / cable_width / 2) * 512;

  vec3 normalTanSpace = normalize(cable_normal.eval(texCoord).yxz * 2 - 1 + vec3(0, 0, 0.5)); // already in tangent space
  normalTanSpace.x = -normalTanSpace.x;
  vec3 lightDirTanSpace = normalize(TBN_inv * lightDir);
  vec3 viewDirTanSpace = normalize(TBN_inv * vec3(0, 0, 1));

  vec3 normal = normalize(TBN * normalTanSpace);

  vec4 color;
  color.rgba = cable_color.eval(texCoord).rgba;
  float light = min(1, 0.2 + max(dot(normalTanSpace, lightDirTanSpace), 0));
  color.rgb = light * color.rgb;

  color.rgb += pow(length(normal.xy), 8) * vec3(0.9, 0.9, 0.9) * 0.5; // rim lighting

  color.rgb += pow(max(dot(reflect(-lightDirTanSpace, normalTanSpace), viewDirTanSpace), 0), 10) * vec3(0.4, 0.4, 0.35);

  // color.r = uv.x * 0.5 + 0.5;
  // color.g = uv.y * 10;
  // color.b = 0;
  // color.a = 1;
  return color;
}