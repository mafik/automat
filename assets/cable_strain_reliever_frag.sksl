// #version 300
// kind=meshfrag
const float PI = 3.1415926535897932384626433832795;

const float LENGTH = 0.015;
const float WIDTH_TOP = 0.003;
const float WIDTH_BOTTOM = 0.008;

const float DARK_EDGE_R = 0.0003;
const float ROUNDED_R = 0.0002;

// struct Varyings {
//     float2 uv;
//     float2 position;
//     float2 tangent;
// };

float GetWidth(float length) {
    // Interpolate between kTopWidth & kBottomWidth in a sine-like fashion
    float a = length / LENGTH * PI;  // scale position to [0, pi]
    float t = cos(a) * 0.5 + 0.5;                   // map cos to [0, 1] range
    return t * WIDTH_BOTTOM + (1 - t) * WIDTH_TOP;
}

float lerp(float a, float b, float t) {
    return a + (b - a) * t;
}

float2 main(const Varyings v, out float4 color) {
    vec3 lightDir = normalize(vec3(0, 1, 1)); // normalized vector pointing from current fragment towards the light

    float width = GetWidth(v.uv.y);
    float x_offset = width * v.uv.x / 2; // distance from the center in the horizontal direction
    float edge_dist = width / 2 - abs(x_offset); // distance from the edge of the shape
    float r = lerp(0.0008, WIDTH_TOP / 2, v.uv.y / LENGTH);

    float angle = acos(sign(v.uv.x) * pow(abs(v.uv.x), lerp(5, 1, v.uv.y / LENGTH)));
    float h = sin(angle);

    vec3 T = vec3(normalize(v.tangent), 0);
    vec3 N = normalize(vec3(cos(angle) * T.y, -cos(angle) * T.x, h));
    vec3 B = cross(T, N);
    float3x3 TBN = float3x3(T, B, N);
    float3x3 TBN_inv = transpose(TBN);

    vec3 normalTanSpace = vec3(0, 0, 1);
    normalTanSpace.x = -normalTanSpace.x;
    vec3 lightDirTanSpace = normalize(TBN_inv * lightDir);
    vec3 viewDirTanSpace = normalize(TBN_inv * vec3(0, 0, 1));
    
    color.rgba = vec4(0x30 / 255., 0x30 / 255., 0x30 / 255., 1);

    if (v.uv.y < DARK_EDGE_R) {
        float t = v.uv.y / DARK_EDGE_R;
        color.rgb = color.rgb * (t) + color.rgb / 2 * (1 - t);
    }
    float light = max(dot(normalTanSpace, lightDirTanSpace), 0.2);
    color.rgb = light * color.rgb;

    color.rgb += pow(length(N.xy), 10) * vec3(0x8f / 255., 0x92 / 255., 0x93 / 255.) * 0.7;
    color.rgb += pow(max(dot(reflect(-lightDirTanSpace, normalTanSpace), viewDirTanSpace), 0), 5) * vec3(0x8f / 255., 0x92 / 255., 0x93 / 255.) * 0.7;

    vec2 dist_to_edge = vec2(max(0, ROUNDED_R - edge_dist), max(0, ROUNDED_R - v.uv.y))  / ROUNDED_R;
    // color.rgb = vec3(length(dist_to_edge));
    if (length(dist_to_edge) > 1) {
        color.rgba = vec4(0);
    }
    // color.rgba = color.rgba * (1 - length(dist_to_edge));

    return v.position;
}