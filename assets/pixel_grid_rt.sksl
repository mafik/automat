// kind=shader

// SPDX-FileCopyrightText: Copyright 2025 Automat Authors
// SPDX-License-Identifier: MIT

uniform float2 u_dpdx;
uniform float2 u_dpdy;

// praise https://iquilezles.org/articles/filterableprocedurals/
vec2 grid(in float N, in vec2 p) {
    p /= N;
    vec2 dpdx = u_dpdx / N;
    vec2 dpdy = u_dpdy / N;
    vec2 w = max(abs(dpdx), abs(dpdy));
    vec2 a = p + 0.5 * w;
    vec2 b = p - 0.5 * w;
    vec2 i = (floor(a) + min(fract(a) * N, 1.0) - floor(b) - min(fract(b) * N, 1.0)) / (N * w);
    return i;
}

vec4 main(vec2 uv) {
    uv += 0.5;
    float2 grid10 = grid(10, uv);
    float2 grid100 = grid(100, uv);

    // old formula (works good on black background)
    // return vec4(min(max(grid100.x, grid10.x * 0.2), 0.3), min(max(grid100.y, grid10.y * 0.2), 0.3), 0, 1);
    float2 grid = min(max(grid100, grid10 * 0.2), 0.7);

    vec3 green = vec3(0, 0.4, 0.16);
    vec3 red = vec3(0.5, 0, 0);

    return vec4(grid.x * green + grid.y * red, max(grid.x, grid.y));

    // float alpha = min(max(max(grid10.x * 0.2, grid10.y * 0.2), max(grid100.x, grid100.y)), 0.3);

    // return vec4(max(grid100.x, grid10.x) * alpha, max(grid100.y, grid10.y) * alpha, 0, 1);
}
