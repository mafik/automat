#include "x11.hh"

namespace x11 {

using automat::gui::AnsiKey;
using enum automat::gui::AnsiKey;

AnsiKey X11KeyCodeToKey(KeyCode key_code) {
  switch (key_code) {
    case KeyCode::Esc:
      return Escape;
    case KeyCode::F1:
      return F1;
    case KeyCode::F2:
      return F2;
    case KeyCode::F3:
      return F3;
    case KeyCode::F4:
      return F4;
    case KeyCode::F5:
      return F5;
    case KeyCode::F6:
      return F6;
    case KeyCode::F7:
      return F7;
    case KeyCode::F8:
      return F8;
    case KeyCode::F9:
      return F9;
    case KeyCode::F10:
      return F10;
    case KeyCode::F11:
      return F11;
    case KeyCode::F12:
      return F12;
    case KeyCode::PrintScrn:
      return PrintScreen;
    case KeyCode::ScrollLock:
      return ScrollLock;
    case KeyCode::Pause:
      return Pause;
    case KeyCode::Insert:
      return Insert;
    case KeyCode::Delete:
      return Delete;
    case KeyCode::Home:
      return Home;
    case KeyCode::End:
      return End;
    case KeyCode::PageUp:
      return PageUp;
    case KeyCode::PageDown:
      return PageDown;
    case KeyCode::Up:
      return Up;
    case KeyCode::Down:
      return Down;
    case KeyCode::Left:
      return Left;
    case KeyCode::Right:
      return Right;
    case KeyCode::NumLock:
      return NumLock;
    case KeyCode::KpDivide:
      return NumpadDivide;
    case KeyCode::KpMultiply:
      return NumpadMultiply;
    case KeyCode::KpMinus:
      return NumpadMinus;
    case KeyCode::KpPlus:
      return NumpadPlus;
    case KeyCode::KpEnter:
      return NumpadEnter;
    case KeyCode::KpDot:
      return NumpadPeriod;
    case KeyCode::Kp0:
      return Numpad0;
    case KeyCode::Kp1:
      return Numpad1;
    case KeyCode::Kp2:
      return Numpad2;
    case KeyCode::Kp3:
      return Numpad3;
    case KeyCode::Kp4:
      return Numpad4;
    case KeyCode::Kp5:
      return Numpad5;
    case KeyCode::Kp6:
      return Numpad6;
    case KeyCode::Kp7:
      return Numpad7;
    case KeyCode::Kp8:
      return Numpad8;
    case KeyCode::Kp9:
      return Numpad9;
    case KeyCode::Grave:
      return Grave;
    case KeyCode::Digit1:
      return Digit1;
    case KeyCode::Digit2:
      return Digit2;
    case KeyCode::Digit3:
      return Digit3;
    case KeyCode::Digit4:
      return Digit4;
    case KeyCode::Digit5:
      return Digit5;
    case KeyCode::Digit6:
      return Digit6;
    case KeyCode::Digit7:
      return Digit7;
    case KeyCode::Digit8:
      return Digit8;
    case KeyCode::Digit9:
      return Digit9;
    case KeyCode::Digit0:
      return Digit0;
    case KeyCode::Minus:
      return Minus;
    case KeyCode::Equals:
      return Equals;
    case KeyCode::Backspace:
      return Backspace;
    case KeyCode::Tab:
      return Tab;
    case KeyCode::Q:
      return Q;
    case KeyCode::W:
      return W;
    case KeyCode::E:
      return E;
    case KeyCode::R:
      return R;
    case KeyCode::T:
      return T;
    case KeyCode::Y:
      return Y;
    case KeyCode::U:
      return U;
    case KeyCode::I:
      return I;
    case KeyCode::O:
      return O;
    case KeyCode::P:
      return P;
    case KeyCode::LeftBracket:
      return BracketLeft;
    case KeyCode::RightBracket:
      return BracketRight;
    case KeyCode::BackSlash:
      return Backslash;
    case KeyCode::CapsLock:
      return CapsLock;
    case KeyCode::A:
      return A;
    case KeyCode::S:
      return S;
    case KeyCode::D:
      return D;
    case KeyCode::F:
      return F;
    case KeyCode::G:
      return G;
    case KeyCode::H:
      return H;
    case KeyCode::J:
      return J;
    case KeyCode::K:
      return K;
    case KeyCode::L:
      return L;
    case KeyCode::Semicolon:
      return Semicolon;
    case KeyCode::Apostrophe:
      return Apostrophe;
    case KeyCode::Return:
      return Enter;
    case KeyCode::ShiftLeft:
      return ShiftLeft;
    case KeyCode::Z:
      return Z;
    case KeyCode::X:
      return X;
    case KeyCode::C:
      return C;
    case KeyCode::V:
      return V;
    case KeyCode::B:
      return B;
    case KeyCode::N:
      return N;
    case KeyCode::M:
      return M;
    case KeyCode::Comma:
      return Comma;
    case KeyCode::Dot:
      return Period;
    case KeyCode::Slash:
      return Slash;
    case KeyCode::ShiftRight:
      return ShiftRight;
    case KeyCode::CtrlLeft:
      return ControlLeft;
    case KeyCode::SuperLeft:
      return SuperLeft;
    case KeyCode::AltLeft:
      return AltLeft;
    case KeyCode::Space:
      return Space;
    case KeyCode::AltRight:
      return AltRight;
    case KeyCode::SuperRight:
      return SuperRight;
    case KeyCode::Compose:
      return Application;
    case KeyCode::CtrlRight:
      return ControlRight;
    default:
      return Unknown;
  }
}

KeyCode KeyToX11KeyCode(AnsiKey key) {
  switch (key) {
    case Unknown:
    case Count:
      return KeyCode::Unknown;
    case Escape:
      return KeyCode::Esc;
    case F1:
      return KeyCode::F1;
    case F2:
      return KeyCode::F2;
    case F3:
      return KeyCode::F3;
    case F4:
      return KeyCode::F4;
    case F5:
      return KeyCode::F5;
    case F6:
      return KeyCode::F6;
    case F7:
      return KeyCode::F7;
    case F8:
      return KeyCode::F8;
    case F9:
      return KeyCode::F9;
    case F10:
      return KeyCode::F10;
    case F11:
      return KeyCode::F11;
    case F12:
      return KeyCode::F12;
    case PrintScreen:
      return KeyCode::PrintScrn;
    case ScrollLock:
      return KeyCode::ScrollLock;
    case Pause:
      return KeyCode::Pause;
    case Insert:
      return KeyCode::Insert;
    case Delete:
      return KeyCode::Delete;
    case Home:
      return KeyCode::Home;
    case End:
      return KeyCode::End;
    case PageUp:
      return KeyCode::PageUp;
    case PageDown:
      return KeyCode::PageDown;
    case Up:
      return KeyCode::Up;
    case Down:
      return KeyCode::Down;
    case Left:
      return KeyCode::Left;
    case Right:
      return KeyCode::Right;
    case NumLock:
      return KeyCode::NumLock;
    case NumpadDivide:
      return KeyCode::KpDivide;
    case NumpadMultiply:
      return KeyCode::KpMultiply;
    case NumpadMinus:
      return KeyCode::KpMinus;
    case NumpadPlus:
      return KeyCode::KpPlus;
    case NumpadEnter:
      return KeyCode::KpEnter;
    case NumpadPeriod:
      return KeyCode::KpDot;
    case Numpad0:
      return KeyCode::Kp0;
    case Numpad1:
      return KeyCode::Kp1;
    case Numpad2:
      return KeyCode::Kp2;
    case Numpad3:
      return KeyCode::Kp3;
    case Numpad4:
      return KeyCode::Kp4;
    case Numpad5:
      return KeyCode::Kp5;
    case Numpad6:
      return KeyCode::Kp6;
    case Numpad7:
      return KeyCode::Kp7;
    case Numpad8:
      return KeyCode::Kp8;
    case Numpad9:
      return KeyCode::Kp9;
    case Grave:
      return KeyCode::Grave;
    case Digit1:
      return KeyCode::Digit1;
    case Digit2:
      return KeyCode::Digit2;
    case Digit3:
      return KeyCode::Digit3;
    case Digit4:
      return KeyCode::Digit4;
    case Digit5:
      return KeyCode::Digit5;
    case Digit6:
      return KeyCode::Digit6;
    case Digit7:
      return KeyCode::Digit7;
    case Digit8:
      return KeyCode::Digit8;
    case Digit9:
      return KeyCode::Digit9;
    case Digit0:
      return KeyCode::Digit0;
    case Minus:
      return KeyCode::Minus;
    case Equals:
      return KeyCode::Equals;
    case Backspace:
      return KeyCode::Backspace;
    case Tab:
      return KeyCode::Tab;
    case Q:
      return KeyCode::Q;
    case W:
      return KeyCode::W;
    case E:
      return KeyCode::E;
    case R:
      return KeyCode::R;
    case T:
      return KeyCode::T;
    case Y:
      return KeyCode::Y;
    case U:
      return KeyCode::U;
    case I:
      return KeyCode::I;
    case O:
      return KeyCode::O;
    case P:
      return KeyCode::P;
    case BracketLeft:
      return KeyCode::LeftBracket;
    case BracketRight:
      return KeyCode::RightBracket;
    case Backslash:
      return KeyCode::BackSlash;
    case CapsLock:
      return KeyCode::CapsLock;
    case A:
      return KeyCode::A;
    case S:
      return KeyCode::S;
    case D:
      return KeyCode::D;
    case F:
      return KeyCode::F;
    case G:
      return KeyCode::G;
    case H:
      return KeyCode::H;
    case J:
      return KeyCode::J;
    case K:
      return KeyCode::K;
    case L:
      return KeyCode::L;
    case Semicolon:
      return KeyCode::Semicolon;
    case Apostrophe:
      return KeyCode::Apostrophe;
    case Enter:
      return KeyCode::Return;
    case ShiftLeft:
      return KeyCode::ShiftLeft;
    case Z:
      return KeyCode::Z;
    case X:
      return KeyCode::X;
    case C:
      return KeyCode::C;
    case V:
      return KeyCode::V;
    case B:
      return KeyCode::B;
    case N:
      return KeyCode::N;
    case M:
      return KeyCode::M;
    case Comma:
      return KeyCode::Comma;
    case Period:
      return KeyCode::Dot;
    case Slash:
      return KeyCode::Slash;
    case ShiftRight:
      return KeyCode::ShiftRight;
    case ControlLeft:
      return KeyCode::CtrlLeft;
    case SuperLeft:
      return KeyCode::SuperLeft;
    case AltLeft:
      return KeyCode::AltLeft;
    case Space:
      return KeyCode::Space;
    case AltRight:
      return KeyCode::AltRight;
    case SuperRight:
      return KeyCode::SuperRight;
    case Application:
      return KeyCode::Compose;
    case ControlRight:
      return KeyCode::CtrlRight;
  }
}

}  // namespace x11